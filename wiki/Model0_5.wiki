#summary Summary of model version 0.5.
#labels Phase-Design,Development

[Model0_4 < 0.4] | *0.5* | [Model0_6 0.6 >]

<wiki:toc max_depth="2" />

=Model 0.4.1=

*Released [http://journals.jevon.org/users/jevon-phd/entry/19777 December 2009]*

This is a minor release which changes the approach used in the code generation of operations. Instead of generating operations as an exhaustive structured program, each instruction is generated as a state, and the execution flow is executed based on a call stack. In particular, this means that loops in the execution flow will no longer cause code generation to fail.

Advanced verification with CrocoPat is also provided as an _experimental_ feature plugin. Currently this only detects [http://code.google.com/p/iaml/source/browse/branches/2009-08-owl/org.openiaml.verification.crocopat/rules/infinite_redirection.rml?spec=svn1301&r=1301 infinite redirection loops].

==New Elements==

===Arithmetic===

Allows for inline arithmetic expressions.

  _See [http://openiaml.org/model/Arithmetic]_

==Changes==

[http://openiaml.org/model/ExecutionEdge ExecutionEdges] can now have names; a [[http://openiaml.org/model/DecisionCondition DecisionCondition] will use the labels 'yes' or 'no' (also 'pass' or 'fail') in order to calculate the correct execution flow.

All [ApplicationElementProperty]s now also create a condition called "X is set" in the container for the property. This is used in [SyncWires] to ensure that init/access does not overwrite the default (or existing) value if there is no value to replace it with. This is powered by a new [IamlDecisionConditions decision condition] "is set?"

Added documentation on [IamlDecisionConditions].

=Model 0.4.2=

*Released [http://journals.jevon.org/users/jevon-phd/entry/19798 February 2010]*

This minor release adds the concept of Entry Gates and Exit Gates, preventing access inside or outside a session without first co-operating with a given requirement (currently only other pages). [url=http://iaml.googlecode.com/svn-history/r1497/trunk/examples/GateDisclaimer/GateDisclaimer-4.html]This example[/url] demonstrates using an Entry Gate to prevent viewing pages until a disclaimer page has been viewed; and [url=http://iaml.googlecode.com/svn-history/r1497/trunk/examples/ExitGateAdSimple/ExitGateAdSimple-1.html]this example[/url] illustrates an advertisement being displayed before the user can exit out of the session.

Conditional modelling is now also generated into code the same way as operational modelling in [#Model_0.4.1 0.4.1].

==New Elements==

===EntryGate===

Restricts access within a [http://openiaml.org/model/Scope Scope] until the incoming condition has been satisfied.

  _See [http://openiaml.org/model/EntryGate]_

===ExitGate===

Restricts access outside of a currently-visited [http://openiaml.org/model/Scope Scope] until the incoming condition has been satisfied.

  _See [http://openiaml.org/model/ExitGate]_

==Changes==

*Pages* have been renamed into [http://openiaml.org/model/Frame Frames]. In the future, this will allow Frames to recursively contain other Frames, which may be replaced using particular [http://openiaml.org/model/WireEdge wires] (the exact specifics have not been decided yet).

=Model 0.4.3=

*Released [http://journals.jevon.org/users/jevon-phd/entry/19803 February 2010]*

This minor release adds the [http://openiaml.org/model/Label Label], which allows a static field that cannot be edited by a user, yet can still be changed (for example, on events).

This release also marks the start of some significant metamodel refactoring, which should hopefully be transparent to (any) end users.

==New Elements==

===Label===

Represents a label which cannot be edited by the user; however, the value of the label _can_ change at runtime, by changing the Label.fieldValue.

  _See [http://openiaml.org/model/Label]_

==Changes==

A [http://openiaml.org/model/SetWire SetWire] connecting from a [http://openiaml.org/model/DomainObjectInstance DomainObjectInstance] to a [http://openiaml.org/model/InputForm InputForm] will now generate [http://openiaml.org/model/Label Labels]; compare this to [http://openiaml.org/model/SyncWire SyncWires] creating [http://openiaml.org/model/InputTextField InputTextFields].

[http://openiaml.org/model/DomainObjectInstance DomainObjectInstance].autosave and [http://openiaml.org/model/DomainAttributeInstance DomainAttributeInstance].autosave now default to "false".

ParameterWires are now known as [http://openiaml.org/model/ParameterEdge ParameterEdges]. They are no longer [http://openiaml.org/model/Wire Wires].

The modelling language is currently undergoing a major meta-model refactoring, which should hopefully be transparent to end-users. In particular:

  * ParameterWire is now [http://openiaml.org/model/ParameterEdge ParameterEdge]
  * ExtendsWire is now [http://openiaml.org/model/ExtendsEdge ExtendsEdge]
  * RequiresWire is now [http://openiaml.org/model/RequiresEdge RequiresEdge]
  * ProvidesWire is now [http://openiaml.org/model/ProvidesEdge ProvidesEdge]
  * ConstraintWire is now [http://openiaml.org/model/ConstraintEdge ConstraintEdge]
  * ConditionWire is now [http://openiaml.org/model/ConditionEdge ConditionEdge]

=Model 0.4.4=

*Released [http://journals.jevon.org/users/jevon-phd/entry/19812 March 2010]*

This adds the significant modelling concept of data types, and allows values to be cast between different types (although not completely extensible at this point in time).

==New Elements==

===CastNode===

A [http://openiaml.org/model/CastNode CastNode] allows one data value to be cast to a different type. The potential result of the cast can be checked by a [http://openiaml.org/model/DecisionOperation DecisionOperation] called 'can cast?', allowing for input validation to occur.

==Changes==

Data types are implemented using XSD data types, which in the future allowing for user-defined data types to be defined by third parties. Different values can be [http://openiaml.org/model/CastNode cast to different types].

[http://openiaml.org/model/InputTextField InputTextFields] now automatically create an internal [http://openiaml.org/model/Label Label] called "Warning", which allows for validation to occur. Labels can also be shown and hidden using the 'show' and 'hide' [http://openiaml.org/model/PrimitiveOperation PrimitiveOperations].

Internally, I finally fixed a bug where [http://code.google.com/p/iaml/issues/detail?id=43 AJAX calls were not being synchronised correctly]. As a result, the test cases are much more reliable and faster to run.

Operations and conditions are [http://code.google.com/p/iaml/source/detail?r=1714 no longer generated on every page]; rather, they are generated into separate include files. As a result, code generation and testing is faster, but actually loading the generated pages using a browser is much slower. This should be fixed in the future.

The [Milestones] have also been updated, and after a weeks worth of research writing, the focus will be on implementing [http://code.google.com/p/iaml/wiki/Milestones#Release_0.5 RIA-specific modelling features].

The meta-model refactoring has continued; for example:

  * RunInstanceWire and NavigateWire are now [http://openiaml.org/model/Action Actions]

=Model 0.4.5=

  _Currently under development._

  * Added [http://code.google.com/p/iaml/source/browse/trunk/org.openiaml.model.actions/src/org/openiaml/model/custom/actions/ExportDotGraphAction.java?spec=svn1756&r=1756 an action] to export a given IAML model to DOT format.
  * Added [http://code.google.com/p/iaml/source/browse/trunk/org.openiaml.model.actions/src/org/openiaml/model/custom/actions/ExportInferredDotGraphAction.java?spec=svn1756&r=1756 an action] to export the initial, and completed, model to DOT format.