#summary Summary of model version 0.3.
#labels Phase-Design,Development,Featured

[Model0_2 < 0.2] | *0.3* | [Model0_4 0.4 >]

=Model 0.3=

<wiki:toc max_depth="2" />

=Introduction=

TODO

=Knowledge Inference=

==New Instance Wires==

http://iaml.googlecode.com/svn/trunk/org.openiaml.model.tests/src/org/openiaml/model/tests/inference/model0_3/images/NewInstanceWireMapping-3.png

|| *Inference and Runtime Tests* || [http://code.google.com/p/iaml/source/browse/trunk/org.openiaml.model.tests/src/org/openiaml/model/tests/inference/model0_3/NewInstanceWireMapping.java NewInstanceWireMapping.java] ||
|| *Inference Rules* || [http://code.google.com/p/iaml/source/browse/trunk/org.openiaml.model.drools/rules/runtime/new-instance.drl runtime/new-instance.drl] ||

If a _NewInstanceWire_ is connected from a _DomainObject_ to a _DomainObjectInstance_, the attributes from the _DomainObject_ will automatically populate the _DomainObjectInstance_ unless [OverridingGeneration overridden].

==Input Form Population==

http://iaml.googlecode.com/svn/trunk/org.openiaml.model.tests/src/org/openiaml/model/tests/inference/model0_3/images/InputFormInstanceMapping-1.png

|| *Inference and Runtime Tests* || [http://code.google.com/p/iaml/source/browse/trunk/org.openiaml.model.tests/src/org/openiaml/model/tests/inference/model0_3/InputFormInstanceMapping.java InputFormInstanceMapping.java] ||
|| *Inference Rules* || [http://code.google.com/p/iaml/source/browse/trunk/org.openiaml.model.drools/rules/sync-wires.drl?spec=svn745&r=745#626 sync-wires.drl] ||
|| *UI Action* || [http://code.google.com/p/iaml/source/browse/trunk/org.openiaml.model.diagram.custom/src/org/openiaml/model/diagram/custom/actions/RefreshObjectInstanceMappingsWithDrools.java RefreshObjectInstanceMappingsWithDrools.java] ||

If an _InputForm_ is connected to a _DomainObjectInstance_, then attributes within the instance will automatically create editable _InputTextFields_ within the form.

Following the inference below of SyncWires with ApplicationElements, these new text fields will also automatically sync up.

This can also be achieved by right clicking the _DomainObjectInstance_ and selecting _IAML Model_ > _Refresh all DomainObjectInstance Mappings_.

==Domain Stores from Properties files==

|| *Inference and Runtime Tests* || [http://code.google.com/p/iaml/source/browse/trunk/org.openiaml.model.tests/src/org/openiaml/model/tests/inference/model0_3/PropertiesFileMapping.java PropertiesFileMapping.java] ||
|| *Inference Rules* || [http://code.google.com/p/iaml/source/browse/trunk/org.openiaml.model.drools/rules/runtime/file-domain-object.drl?spec=svn753&r=753 file-domain-object.drl] ||
|| *UI Action* || [http://code.google.com/p/iaml/source/browse/trunk/org.openiaml.model.diagram.custom/src/org/openiaml/model/diagram/custom/actions/RefreshDomainStoreMappingsWithDrools.java RefreshDomainStoreMappingsWithDrools.java] ||

If a _DomainStore_ is of type _PropertiesFile_, the _DomainStore_ will be automatically populated from the values in the _PropertiesFile_ (in particular, this will create a _DomainObject_ named "properties", and all properties in the file will be added as attributes).

This can also be achieved by right clicking the _DomainStore_ and selecting _IAML Model_ > _Refresh all DomainStore Mappings_.

==Sync Wires with Application Elements==

|| *Inference and Runtime Tests* || [http://code.google.com/p/iaml/source/browse/trunk/org.openiaml.model.tests/src/org/openiaml/model/tests/inference/model0_3/InputFormInstanceMapping.java InputFormInstanceMapping.java] ||
|| *Inference Rules* || [http://code.google.com/p/iaml/source/browse/trunk/org.openiaml.model.drools/rules/sync-wires.drl?spec=svn745&r=745#626 sync-wires.drl] ||
|| *UI Action* || [http://code.google.com/p/iaml/source/browse/trunk/org.openiaml.model.diagram.custom/src/org/openiaml/model/diagram/custom/actions/RefreshFormMappingsWithDrools.java RefreshFormMappingsWithDrools.java] ||

If two _ApplicationElements_ are connected via a _SyncWire_ labelled "sync", and these elements both contain other elements that match to each other (currently through a case-insensitive naming match), these elements will also gain a _SyncWire_ between each other.

This can also be achieved by right clicking the _DomainObjectInstance_ and selecting _IAML Model_ > _Refresh all Form Mappings_.

=New Elements=

==Sessions==
|| *Description* || ApplicationElementProperties stored within a Session (i.e. text field values, login keys) are only available to a single session user. When the session is closed, the values are lost. ||
|| *Models* || [http://iaml.googlecode.com/svn/trunk/org.openiaml.model.tests/src/org/openiaml/model/tests/codegen/ Session*.iaml] ||
|| *Inference Tests* || - ||
|| *Runtime Tests* || [http://code.google.com/p/iaml/source/browse/trunk/org.openiaml.model.tests/src/org/openiaml/model/tests/codegen/ Session*.java] ||

http://iaml.googlecode.com/svn/trunk/org.openiaml.model.tests/src/org/openiaml/model/tests/codegen/images/SessionSyncWires.png 

==Operation/Condition Modelling (2)==

*Temporary Variables*
|| *Description* || Within operation or condition modelling, these represent temporary variables. When the operation is finished, the values will have been lost. ||

*Execution Flow*
|| *Description* || Within operation or condition modelling, the _execution flow_ models the order in which operations are executed. If an operation has multiple outwards ExecutionEdges, they are run in series (ideally they would be parallel). ||

*Data Flow*
|| *Description* || Within operation or condition modelling, the _data flow_ models the flow of dat between elements; for example, from a parameter to a temporary variable, or as a parameter to an operation. ||

*Start Node*
|| *Description* || An operation or condition starts at the start node. ||

*Finish Node*
|| *Description* || An operation completes at the finish node. In conditions, this means the condition has passed. ||

*Cancel Node*
|| *Description* || If the operation has not completed successfully, then the cancel node acts as a failure or exception-throwing element. The value provided is the exception message thrown. In conditions, this means the condition has failed. ||

|| *Model* || [http://iaml.googlecode.com/svn/trunk/org.openiaml.model.tests/src/org/openiaml/model/tests/codegen/DataFlowTemporaryVariable.iaml DataFlowTemporaryVariable.iaml] ||
|| *Inference Tests* || No inference ||
|| *Runtime Tests* || [http://code.google.com/p/iaml/source/browse/trunk/org.openiaml.model.tests/src/org/openiaml/model/tests/codegen/DataFlowTemporaryVariable.java  DataFlowTemporaryVariable.java] ||

For a discussion of possible operation components and pre-defined composite operations, see [IamlOperations] or [IamlCompositeOperations].

http://iaml.googlecode.com/svn/trunk/org.openiaml.model.tests/src/org/openiaml/model/tests/codegen/images/DataFlowTemporaryVariable-4.png

==Buttons==
|| *Description* || These represent clickable "buttons" in the user interface. ||
|| *Models* || [http://iaml.googlecode.com/svn/trunk/org.openiaml.model.tests/src/org/openiaml/model/tests/codegen/model0_3/ButtonNavigate.iaml ButtonNavigate.iaml], [http://iaml.googlecode.com/svn/trunk/org.openiaml.model.tests/src/org/openiaml/model/tests/codegen/model0_3/ButtonSetValue.iaml ButtonSetValue.iaml] ||
|| *Inference Tests* || No inference ||
|| *Runtime Tests* || [http://code.google.com/p/iaml/source/browse/trunk/org.openiaml.model.tests/src/org/openiaml/model/tests/codegen/model0_3/ButtonNavigate.java ButtonNavigate.java], [http://code.google.com/p/iaml/source/browse/trunk/org.openiaml.model.tests/src/org/openiaml/model/tests/codegen/model0_3/ButtonSetValue.java ButtonSetValue.java] ||

If a Button contains an EventTrigger labelled _click_ or _onClick_, this EventTrigger will be called when the button is clicked or selected.

http://iaml.googlecode.com/svn/trunk/org.openiaml.model.tests/src/org/openiaml/model/tests/codegen/model0_3/images/ButtonSetValue-6.png
http://iaml.googlecode.com/svn/trunk/org.openiaml.model.tests/src/org/openiaml/model/tests/codegen/model0_3/images/ButtonSetValue-7.png

==Domain Object Instance==
|| *Description* || _DomainObjectInstances_ are instances of a _DomainObject_. They are created by a _NewInstanceWire_. ||
|| *Model* || [http://iaml.googlecode.com/svn/trunk/org.openiaml.model.tests/src/org/openiaml/model/tests/codegen/model0_3/NewInstanceObject.iaml NewInstanceObject.iaml], [http://iaml.googlecode.com/svn/trunk/org.openiaml.model.tests/src/org/openiaml/model/tests/codegen/model0_3/NewInstanceObjectAutosave.iaml NewInstanceObjectAutosave.iaml] ||
|| *Inference Tests* || - ||
|| *Runtime Tests* || [http://code.google.com/p/iaml/source/browse/trunk/org.openiaml.model.tests/src/org/openiaml/model/tests/codegen/model0_3/NewInstanceObject.java NewInstanceObject.java], [http://code.google.com/p/iaml/source/browse/trunk/org.openiaml.model.tests/src/org/openiaml/model/tests/codegen/model0_3/NewInstanceObjectAutosave.java NewInstanceObjectAutosave.java] ||

If "autosave" is set to _false_ on the _DomainObjectInstance_, then changes to the attributes within the instance will not be automatically saved. The "save" operation will have to be called manually.

http://iaml.googlecode.com/svn/trunk/org.openiaml.model.tests/src/org/openiaml/model/tests/codegen/model0_3/images/NewInstanceObject-1.png

==Domain Attribute Instance==
|| *Description* || Like a _DomainObjectInstance_, except concerned with an attribute. A _DomainObjectInstance_ contains many _DomainAttributeInstances_. ||
|| *Model* || [http://iaml.googlecode.com/svn/trunk/org.openiaml.model.tests/src/org/openiaml/model/tests/codegen/model0_3/NewInstanceAttributeSession.iaml NewInstanceAttributeSession.iaml], [http://iaml.googlecode.com/svn/trunk/org.openiaml.model.tests/src/org/openiaml/model/tests/codegen/model0_3/NewInstanceAttributeSessionAutosave.iaml NewInstanceAttributeSessionAutosave.iaml] ||
|| *Inference Tests* || - ||
|| *Runtime Tests* || [http://code.google.com/p/iaml/source/browse/trunk/org.openiaml.model.tests/src/org/openiaml/model/tests/codegen/model0_3/NewInstanceAttributeSession.java NewInstanceAttributeSession.java], [http://code.google.com/p/iaml/source/browse/trunk/org.openiaml.model.tests/src/org/openiaml/model/tests/codegen/model0_3/NewInstanceAttributeSessionAutosave.java NewInstanceAttributeSessionAutosave.java] ||

_DomainObjectInstances_ and _DomainAttributeInstances_ can be stored within _Sessions_; otherwise, all visitors to the site will access the same instance.

http://iaml.googlecode.com/svn/trunk/org.openiaml.model.tests/src/org/openiaml/model/tests/codegen/model0_3/images/NewInstanceAttributeSession.png 
http://iaml.googlecode.com/svn/trunk/org.openiaml.model.tests/src/org/openiaml/model/tests/codegen/model0_3/images/NewInstanceAttributeSession-4.png

==Login Handler (type=key)==
|| *Description* || Controls authentication and access to pages, authenticated with a single key. ||
|| *Model* || [https://iaml.googlecode.com/svn/trunk/org.openiaml.model.tests/src/org/openiaml/model/tests/codegen/model0_1/LoginHandlerKey.iaml LoginHandlerKey.iaml] ||
|| *Inference Tests* || - ||
|| *Runtime Tests* || [http://code.google.com/p/iaml/source/browse/trunk/org.openiaml.model.tests/src/org/openiaml/model/tests/codegen/model0_1/LoginHandlerKey.java LoginHandlerKey.java] ||

If placed within a Session, all accesses to pages within the Session must be authenticated through the _LoginHandler_. The _LoginHandler_ uses a single key for authentication. 

The "login key" can be any data source, such as a static value or an _ApplicationElementProperty_.

The _LoginHandler_ has a number of special wires:
  * A _NavigateWire_ called "login" will redirect the user to the page if authentication has failed; this may be generated.
  * A _NavigateWire_ called "logout" will redirect the user to the page if they request to logout; this may be generated.
  * A _SetWire_ called "set" will store the current value of the login key. This may be generated.
  * An incoming _ParameterWire_ provides the current login key to authenticate against.

http://iaml.googlecode.com/svn/trunk/org.openiaml.model.tests/src/org/openiaml/model/tests/codegen/model0_1/images/LoginHandlerKey.png
http://iaml.googlecode.com/svn/trunk/org.openiaml.model.tests/src/org/openiaml/model/tests/codegen/model0_1/images/LoginHandlerKey-1.png

=New Wires=

==Select Wire==
|| *Description* || Selects existing instances of _DomainObjects_ into _DomainObjectInstances_ ||

*See IamlSelectWire for more information.*

http://iaml.googlecode.com/svn/trunk/org.openiaml.model.tests/src/org/openiaml/model/tests/codegen/model0_3/images/SelectFieldFromDynamicObject-1.png

==New Instance Wire==
|| *Description* || These wires create new instances of _DomainObjects_ and _DomainAttributes_ ||
|| *Models* || [http://iaml.googlecode.com/svn/trunk/org.openiaml.model.tests/src/org/openiaml/model/tests/codegen/model0_3/NewInstanceObject.iaml NewInstanceObject.iaml], [http://iaml.googlecode.com/svn/trunk/org.openiaml.model.tests/src/org/openiaml/model/tests/codegen/model0_3/NewInstanceAttributeSession.iaml NewInstanceAttributeSession.iaml] etc ||
|| *Inference Tests* || Covered above ||
|| *Runtime Tests* || [http://code.google.com/p/iaml/source/browse/trunk/org.openiaml.model.tests/src/org/openiaml/model/tests/codegen/model0_3/NewInstanceObject.java NewInstanceObject.java], [http://code.google.com/p/iaml/source/browse/trunk/org.openiaml.model.tests/src/org/openiaml/model/tests/codegen/model0_3/NewInstanceAttributeSession.java NewInstanceAttributeSession.java] etc ||

If the targeted _DomainObjectInstance_ or _DomainAttributeInstance_ is stored within a _Session_, then the new instance will only reside in that session, and will only be saved to the database if "autosave" is enabled or the "save" operation is called.

http://iaml.googlecode.com/svn/trunk/org.openiaml.model.tests/src/org/openiaml/model/tests/inference/model0_3/images/NewInstanceWireMapping-3.png