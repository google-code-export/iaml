#summary Planned development milestones for the IAML plugin
#labels Featured,Phase-QA

=Introduction=
The development of this [Development IAML Eclipse plugin] is based on an iterative approach. In particular, large iterations (minor versions) which are then broken down into smaller iterations (revisions, spikes). These iterations are also designed to be synchronised with my [http://journals.jevon.org/users/jevon-phd PhD]. 

I hope to also use [http://c2.com/cgi/wiki?TestDrivenDevelopment Test Driven Development] significantly in order to test and validate the majority of the plugin. Though I'm not yet sure how to test the usability of Eclipse :)

==Release 0.1==
([http://journals.jevon.org/users/jevon-phd/entry/16760 Released] November 2008)
  # [Model0_1 Initial IAML model] that can describe initial requirements
  # Usability improvements
    * Display shortcut elements for referenced elements
  # Look into rule engines for element inference
  # Testing
    * Initial testing of code generation
    * Initial testing of element inference
    * Testing of plugin structure
  # Code generation 
    * Basic HTML/PHP genereation
  # Set up [Installation update site]

==Release 0.2==
([http://journals.jevon.org/users/jevon-phd/entry/19062 Released] April 2009)
  # [Milestones Publish milestones]
  # [Model0_2 Expand IAML model]
    * All basic model elements can be placed in a diagram 
    * Inference and code generation tests
  # Code generation
    * Clean up structure of code generation plugin
    * Operation deep chaining ([http://code.google.com/p/iaml/source/detail?r=563 r563])
    * Can generate all elements of the [Model0_2 initial requirements]
  # Testing
    * Test operational modelling and generation
    * Test cases for code generation of all modelling elements

==Release 0.3==
([http://journals.jevon.org/users/jevon-phd/entry/19718 Released] July 2009)
(Released)
  # [Model0_3 Expand IAML model]
    * [IamlOperations Document existing atomic operations]
    * [IamlCompositeOperations Document existing composite operations]
  # Inference
    * [ModelInference Queue-based knowledge inference] - to be detailed in upcoming paper
    * Infer directly-contained model elements
    * [http://code.google.com/p/iaml/wiki/Model0_3#Usability_Features Inference actions] available through right-click
  # Code generation
    * Session persistence within multiple remote calls ([http://code.google.com/p/iaml/source/detail?r=586 r586])
    * Generated code is cleaned with the [http://code.google.com/p/iacleaner/ iacleaner] formatter ([http://code.google.com/p/iaml/issues/detail?id=13 issue 13])
  # [Model0_3 Testing and Documentation]
    * Sessions
    * Buttons
    * Operation modelling
    * Condition modelling
    * Domain objects, domain object instances
    * Login handlers (type=key)
    * Select wires
    * New instance wires
  # Editor
    * Create edges from shortcut elements not directly contained ([http://code.google.com/p/iaml/issues/detail?id=34 issue 34])
    * Render shortcut elements and edges not directly contained ([http://code.google.com/p/iaml/issues/detail?id=47 issue 47])
  # Usability improvements
    * [ModelMigration Can migrate models between different versions]
    * Render model diagram to PNG images ([http://code.google.com/p/iaml/issues/detail?id=9 issue 9])
    * Progress monitors for inference and code generation ([http://code.google.com/p/iaml/issues/detail?id=23 issue 23])
    * [http://code.google.com/p/iaml/wiki/Model0_3#Generated_Elements Deletion of generated elements semantics] ([[http://code.google.com/p/iaml/issues/detail?id=29 issue 29])
  # Development
    * [http://code.google.com/p/iaml/source/browse/#svn/trunk/org.openiaml.model.codegen.oaw/instrument/output Investigations into model-driven code coverage]

==Release 0.4+==
([http://code.google.com/p/iaml/issues/list?can=2&q=label%3AMilestone-Release0.4 Outstanding issues])
  # [Model0_4 Expand IAML model]
  # Usability improvements
    * [http://code.google.com/p/iaml/issues/detail?id=30 Sharing single EditingDomain instance] across all editors
  # Development
    * [http://code.google.com/p/iaml/issues/detail?id=21 Set up automated build and release]
    * Automated testing in build script
    * Integration with CruiseControl
    * Code coverage with [http://emma.sourceforge.net/ Emma] and [http://www.eclemma.org/ EclEmma]
    * [http://code.google.com/p/iaml/issues/detail?id=22 Javadoc documentation generation]

==Release 0.9==
  # Can implement [http://openiaml.org Ticket 2.0]

==Release 1.0==
  # Focus on Usability
  # Implement code generation in another language (JSP?)
  # Extensibility