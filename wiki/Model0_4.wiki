#summary Summary of model version 0.4.
#labels Phase-Design,Development

[Model0_3 < 0.3] | *0.4* | [Model0_5 0.5 >]

=Model 0.4=

<wiki:toc max_depth="2" />

=Introduction=

TODO

=New Elements=
==Login Handler (Domain Instance)==

  _See [LoginHandler]_

==Join Node, Split Node==
|| *Description* || A Split Node will split the execution of an operation; a Join Node is required to unify the execution back. ||
|| *Models* || [http://code.google.com/p/iaml/source/browse/trunk/org.openiaml.model.tests/src/org/openiaml/model/tests/codegen/model0_4/JoinSplitClientSide.iaml JoinSplitClientSide.iaml], [http://code.google.com/p/iaml/source/browse/trunk/org.openiaml.model.tests/src/org/openiaml/model/tests/codegen/model0_4/JoinSplitServerSide.iaml JoinSplitServerSide.iaml] ||
|| *Inference Tests* || - ||
|| *Runtime Tests* || [http://code.google.com/p/iaml/source/browse/trunk/org.openiaml.model.tests/src/org/openiaml/model/tests/codegen/model0_4/JoinSplitClientSide.java JoinSplitClientSide.java], [http://code.google.com/p/iaml/source/browse/trunk/org.openiaml.model.tests/src/org/openiaml/model/tests/codegen/model0_4/JoinSplitServerSide.java JoinSplitServerSide.java] ||

All edges coming out of a Split Node should eventually rejoin back at a Join Node; otherwise the effect is currently undefined.

Currently these are implemented in a single threaded way; each execution flow is executed sequentially until all flows are complete. ([http://code.google.com/p/iaml/source/browse/trunk/org.openiaml.model.codegen.oaw/src/template/operations/ExecutionFlow.xpt?spec=svn958&r=958#55 ExecutionFlow.xpt])

http://iaml.googlecode.com/svn/trunk/org.openiaml.model.tests/src/org/openiaml/model/tests/codegen/model0_4/images/JoinSplitServerSide-2.png

==Query Parameter==

|| *Description* || Represents a parameter taken from the current request query. ||
|| *Models* || [http://code.google.com/p/iaml/source/browse/trunk/org.openiaml.model.tests/src/org/openiaml/model/tests/codegen/model0_4/QueryParameterAsParameter.iaml QueryParameterAsParameter.iaml] ||
|| *Inference Tests* || - ||
|| *Runtime Tests* || [http://code.google.com/p/iaml/source/browse/trunk/org.openiaml.model.tests/src/org/openiaml/model/tests/codegen/model0_4/QueryParameterAsParameter.java QueryParameterAsParameter.java] ||

A _Query Parameter_ [http://code.google.com/p/iaml/source/browse/trunk/org.openiaml.model.codegen.oaw/src/metamodel/Checks.chk?spec=svn1000&r=1000#91 can only be connected] to elements contained in the same page as the parameter, as this parameter only exists when the page is accessed.

http://iaml.googlecode.com/svn/trunk/org.openiaml.model.tests/src/org/openiaml/model/tests/codegen/model0_4/images/QueryParameterAsParameter-1.png

==Undocumented==

  * OperationCallNode
  * UserStore
  * Role
  * Permission
  * UserInstance
  * AccessControlHandler

Documentation forthcoming.

=New Wires=
==Set Wire==
|| *Description* || Keeps a target value up-to-date with a source value. ||
|| *Models* || [http://code.google.com/p/iaml/source/browse/trunk/org.openiaml.model.tests/src/org/openiaml/model/tests/codegen/model0_4/SetWireClient.iaml SetWireClient.iaml] ||
|| *Inference Tests* || [http://code.google.com/p/iaml/source/browse/trunk/org.openiaml.model.tests/src/org/openiaml/model/tests/inference/model0_4/SetWireClient.java SetWireClient.java] ||
|| *Runtime Tests* || [http://code.google.com/p/iaml/source/browse/trunk/org.openiaml.model.tests/src/org/openiaml/model/tests/codegen/model0_4/SetWireClient.java SetWireClient.java] ||

Similar in concept and implementation to a _Sync Wire_, except this is unidirectional. If the target value changes, the source change will not change. If connected between containers of elements, the target element will automatically be populated with the source's children, and these will be connected with _Set Wires_.

Can be connected directly to _Input Text Fields_.

http://iaml.googlecode.com/svn/trunk/org.openiaml.model.tests/src/org/openiaml/model/tests/codegen/model0_4/images/SetWireClient-1.png

==Undocumented==

  * ExtendsWire
  * ProvidesWire
  * RequiresWire
  * ConstraintWire

Documentation forthcoming.