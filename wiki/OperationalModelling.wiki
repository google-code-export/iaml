#summary A summary of the elements used in operational modelling.
#labels EndUser,Featured

=Introduction=

The IAML language supports an expressive language for describing the semantics of operations and conditions, called *Operational Modelling*. The syntax has been inspired by [http://www.uml.org/ UML 2.0 Activity Diagrams], however (unlike UML) this approach can be generated to code in PHP and Javascript.

<wiki:toc max_depth="2"/>

=Overview=

This diagram illustrates all of the operational modelling primitives available in IAML ([http://iaml.googlecode.com/svn/trunk/org.openiaml.model.tests/src/org/openiaml/model/tests/codegen/model0_5_1/OperationalExample.iaml source model]).

[http://iaml.googlecode.com/svn/wiki/opmodel/OperationalExample.png]

==Elements==

  # [http://openiaml.org/model/StartNode StartNode]
  # [http://openiaml.org/model/CancelNode CancelNode]
  # [http://openiaml.org/model/FinishNode FinishNode]
  # [http://openiaml.org/model/DecisionNode DecisionNode]
  # [http://openiaml.org/model/SplitNode SplitNode]
  # [http://openiaml.org/model/JoinNode JoinNode]
  # [http://openiaml.org/model/OperationCallNode OperationCallNode]
  # [http://openiaml.org/model/Arithmetic Arithmetic]
  # [http://openiaml.org/model/CastNode CastNode]
  # [http://openiaml.org/model/TemporaryVariable TemporaryVariable]
  # [http://openiaml.org/model/Parameter Parameter]
  # [http://openiaml.org/model/StaticValue StaticValue]
  # [http://openiaml.org/model/DataFlowEdge DataFlowEdge]
  # [http://openiaml.org/model/ExecutionEdge ExecutionEdge]
  # [http://openiaml.org/model/ParameterEdge ParameterEdge]
  # [http://openiaml.org/model/RunAction RunAction]
  # [http://openiaml.org/model/ConditionEdge ConditionEdge]

=Comparison: UML=

These modelling primitives can be compared to a UML Activity Diagram equivalent:

[http://iaml.googlecode.com/svn/wiki/opmodel/UML.png]

=Comparison: Java=

We can also consider this operation as the following Java code:

{{{
public void compositeOperation(String input) {

  try {
    Integer.valueOf(input);
  } catch (NumberFormatException e) {
    throw new RuntimeException("Input is not an integer.");
  }

  final IntegerWrapper temp = new IntegerWrapper(Integer.valueOf(input));

  BlockingRunnable t1 = new BlockingRunnable() {
    @Override
    public void runActual() {
      // empty
    }     
  };
  BlockingRunnable t2 = new BlockingRunnable() {
    @Override
    public void runActual() {
      temp.setValue( temp.getValue() + 1 );
    }
  };

  new Thread(t1).start();
  new Thread(t2).start();
  while (!(t1.isFinished() && t2.isFinished())) {
    Thread.yield();
  }

  if (shouldUpdateResult()) {
    getLabel("Target").update(temp.getValue());
    return;
  } else {
    return;
  }

}
}}}